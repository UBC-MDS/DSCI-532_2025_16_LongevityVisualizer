import dash
from dash import html, dcc
import dash_bootstrap_components as dbc
import dash_vega_components as dvc
from datetime import datetime
from src.data import METRIC_OPTIONS


def create_title():
    """Create the dashboard title section."""
    return dbc.Row(
        [
            html.H1(
                "Longevity Visualizer", style={"color": "white", "textAlign": "center"}
            ),
            html.Br(),
            dcc.Markdown(
                """This Dash app was developed by Team 16 of the 2025 MDS program to provide insights into longevity and affecting 
                         factors around the world!""",
                style={"color": "white", "textAlign": "left", "marginBottom": "2rem"},
            ),
        ]
    )


def create_top_controls(unique_years, continents):
    """Create the top section controls (continent dropdown and year slider)."""
    return [
        dcc.Markdown("**Select Continent(s):**", style={"color": "white"}),
        dcc.Dropdown(
            id="continent-dropdown",
            multi=True,
            options=[{"label": "(All)", "value": "(All)"}]
            + [{"label": i, "value": i} for i in continents],
            value="(All)",
            clearable=False,
            style={"color": "black", "marginBottom": "1rem"},
        ),
        dcc.Markdown("**Select Year:**", style={"color": "white"}),
        html.Div(
            [
                dcc.Slider(
                    id="year-slider-top",
                    min=min(unique_years),
                    max=max(unique_years),
                    value=unique_years[0],
                    marks={
                        str(y): {"label": str(y), "style": {"color": "white"}}
                        for y in unique_years
                    },
                    step=1,
                    updatemode="mouseup",
                    tooltip={"placement": "top", "always_visible": False}
                )
            ],
            style={"marginBottom": "3rem"},
        ),
    ]


def create_bottom_controls():
    """Create the bottom section controls (metric and country dropdowns)."""
    return [
        dcc.Markdown("**Select Metric:**", style={"color": "white"}),
        dcc.Dropdown(
            id="metric-dropdown-bottom",
            options=METRIC_OPTIONS,
            value="gdp",
            clearable=False,
            style={"color": "black", "marginBottom": "1rem"},
        ),
        html.Div(id="metric-definition", style={"color": "white", "fontSize": "14px", "marginBottom": "1rem"}), 
        dcc.Markdown("**Select Country(s):**", style={"color": "white"}),
        dcc.Dropdown(
            id="country-dropdown",
            multi=True,
            value=[],
            clearable=False,
            style={"color": "black", "marginBottom": "1rem"},
        ),
    ]



def create_credits():
    """Create the credits section."""
    return dcc.Markdown(
        f"""
                        **Credits:** Long, Abdul, Nonso and Zhiwei

                        **Data:** Gapminder, generated by Alberto Vidal

                        **Source Code:** <dccLink href="https://github.com/UBC-MDS/DSCI-532_2025_16_LongevityVisualizer" children="Github" style="color: white;" /> 
                          
                        **Last updated:** {datetime.now().strftime("%B %d, %Y")}   
    """,
        dangerously_allow_html=True,
    )


def create_cards():
    """Create the metric cards."""
    card_style = {"height": "100%", "min-height": "100px"}

    card_avg_life = dcc.Loading(dbc.Card(id="average_life", style=card_style),
                                type = 'circle')
    card_avg_service = dcc.Loading(dbc.Card(id="average_service", style=card_style),
                                   type = 'circle')
    card_avg_gdp = dcc.Loading(dbc.Card(id="average_gdp", style=card_style),
                               type = 'circle')

    return dbc.Row(
        [
            dbc.Col(card_avg_life, md=4, className="mb-3"),
            dbc.Col(card_avg_gdp, md=4, className="mb-3"),
            dbc.Col(card_avg_service, md=4, className="mb-3"),
        ],
        className="g-3",
        style={"paddingTop": "2rem", "paddingBottom": "2rem"},
    )


def create_charts():
    """Create the chart containers."""
    chart_style = {
        "height": "100%",
        "min-height": "300px",
        "margin-bottom": "1.5rem",
        "border": "1px solid #ddd",
        "border-radius": "0.25rem",
    }

    map_chart = dcc.Loading(dvc.Vega(
        id="map-graph",
        spec={},
        # style={
        #     "width": "100%",
        # },
        signalsToObserve=["select_region"],
    ), 
    type = 'circle'
    )

    bubble_chart = dcc.Loading(dvc.Vega(
        id="bubble-graph",
        spec={},
        # style={
        #     "width": "100%",
        #     "height": "100%",
        # }
    ), 
    type = 'circle'
    )

    country_metric_chart = dcc.Loading(dvc.Vega(
        id="country-metric-chart", spec={}, 
        # style=chart_style
    ), 
    type = 'circle'
    )

    continent_metric_chart = dcc.Loading(dvc.Vega(
        id="continent-metric-chart", spec={}, 
        # style=chart_style
    ),
    type = 'circle'
    )

    return {
        "map_chart": map_chart,
        "bubble_chart": bubble_chart,
        "country_metric_chart": country_metric_chart,
        "continent_metric_chart": continent_metric_chart,
    }


def create_layout(unique_years, continents):
    """Create the main dashboard layout."""
    # Initialize chart containers
    charts = create_charts()

    # Create sidebar widgets
    widgets = [
        create_title(),
        html.Br(),
        html.Div(create_top_controls(unique_years, continents)),
        html.Div(create_bottom_controls(), style={"marginTop": "2rem"}),
        html.Div(create_credits(), style={"marginTop": "2rem"}),
    ]

    # Add custom CSS using a style tag in the app.css file or in a separate CSS file
    # Instead of using html.Style which doesn't exist in Dash

    # Create layout
    return html.Div(
        [
            dbc.Container(
                [
                    dbc.Row(
                        [
                            # First Column: Global widgets
                            dbc.Col(
                                html.Div(
                                    widgets,
                                    style={
                                        "backgroundColor": "#4077A6",
                                        "padding": "1.5rem",
                                        "min-height": "100vh",
                                        "height": "auto",
                                        "position": "sticky",
                                        "top": "0",
                                        "overflowY": "auto",
                                    },
                                ),
                                xs=12,
                                sm=12,
                                md=3,
                                lg=3,
                                xl=3,
                                className="sidebar-col",
                            ),
                            # Second Column: Charts
                            dbc.Col(
                                [
                                    # First row for 3 cards
                                    create_cards(),
                                    # Second row for 2 charts
                                    dbc.Row(
                                        [
                                            dbc.Col(
                                                [charts["map_chart"]],
                                                xs=12,
                                                md=6,
                                                className="mb-4",
                                            ),
                                            dbc.Col(
                                                [charts["bubble_chart"]],
                                                xs=12,
                                                md=6,
                                                className="mb-4",
                                            ),
                                        ],
                                        className="g-3",
                                    ),
                                    # Third row for 2 charts
                                    dbc.Row(
                                        [
                                            dbc.Col(
                                                [charts["country_metric_chart"]],
                                                xs=12,
                                                md=6,
                                                className="mb-4",
                                            ),
                                            dbc.Col(
                                                [charts["continent_metric_chart"]],
                                                xs=12,
                                                md=6,
                                                className="mb-4",
                                            ),
                                        ],
                                        className="g-3",
                                    ),
                                ],
                                xs=12,
                                sm=12,
                                md=9,
                                lg=9,
                                xl=9,
                                className="content-col",
                                style={"padding": "1.5rem"},
                            ),
                        ]
                    )
                ],
                fluid=True,
                style={"minWidth": "768px"},  # Ensures minimum width for better scaling
            )
        ]
    )
